# Load data from Amerilife_STG sConnection <- "Driver = {SQL Server}; Server = FL-TPA-BI-01.alg.local; Database = Amerilife_STG;" sQuery <- "select * from staging.SSAS_Discovery_Typed" dsDiscovery <- RxSqlServerData(sqlquery = sQuery, connectionString = sConnection, rowsPerRead = 10000)
dsDiscovery <- RxSqlServerData(connectionString = sConnection, table = "staging.SSAS_Discovery_Typed", rowsPerRead = 10000)
?RxSqlServerData
dsDiscovery <- RxSqlServerData(connectionString = sConnection, table = "staging.SSAS_Discovery_Typed", rowsPerRead = 10000, Trusted_Connection)
sConnection <- "Driver = {SQL Server}; Server = FL-TPA-BI-01.alg.local; Database = Amerilife_STG; UID = SQLserverR_user; PWD = Amerilife01"
sQuery <- "select * from staging.SSAS_Discovery_Typed"
dsDiscovery <- RxSqlServerData(connectionString = sConnection, table = "staging.SSAS_Discovery_Typed", rowsPerRead = 10000)
str(dsDiscovery)
head(dsDiscovery)
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;UID=SQLserverR_user;PWD=Amerilife01"
sQuery <- "select * from staging.SSAS_Discovery_Typed"
dsDiscovery <- RxSqlServerData(connectionString = sConnection, table = "staging.SSAS_Discovery_Typed", rowsPerRead = 10000)
head(dsDiscovery)
rxGetVarInfo(data = dsDiscovery)
getwd()
rxDataStep(inData = dsDiscovery, outFile = "./data/DiscoveryAgents.xdf")
dsDiscovery <- RxSqlServerData(connectionString = sConnection, table = sTable, rowsPerRead = 10000, stringsAsFactors = TRUE)
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;UID=SQLserverR_user;PWD=Amerilife01"
# sQuery <- "select * from staging.SSAS_Discovery_Typed"
sTable <- "staging.SSAS_Discovery_Typed"
dsDiscovery <- RxSqlServerData(connectionString = sConnection, table = sTable, rowsPerRead = 10000, stringsAsFactors = TRUE)
rxGetVarInfo(data = dsDiscovery)
rxDataStep(inData = dsDiscovery, outFile = "./data/DiscoveryAgents.xdf", overwrite = TRUE)
rxGetVarInfo(data = dsDiscovery)
str(dsDiscovery)
str(dsDiscovery)
head(dsDiscovery)
summary(dsDiscovery)
rxSummary(dsDiscovery)
rxSummary(~., data = dsDiscovery)
dsDiscovery <- rxImport(inData = "./data/DiscoveryAgents.xdf")
str(dsDiscovery)
summary(dsDiscovery)
levels(dsDiscovery$MarketingCompany)
levels(dsDiscovery$Marketer)
sort(levels(dsDiscovery$Marketer))
sort(levels(dsDiscovery$Agent))
dsDiscovery[dsDiscovery$Agent = "Unknown", ]
dsDiscovery[dsDiscovery$Agent == "Unknown", ]
dsDiscovery$Agent == "Unknown"
dsDiscovery[dsDiscovery$Agent == "Unknown"] <- NA
dsDiscovery[dsDiscovery$Agent == "Unknown"]$Agent <- NA
dsDiscovery[dsDiscovery$Agent == "Unknown",]$Agent <- NA
dsDiscovery[dsDiscovery$Agent == "Unknown",]
head(dsDiscovery)
dsDiscovery <- rxImport(inData = "./data/DiscoveryAgents.xdf")
dsDiscovery[dsDiscovery$Agent == "Unknown",]
dsDiscovery$Agent[dsDiscovery$Agent == "Unknown"] <- NA
dsDiscovery
dsDiscovery[dsDiscovery$Agent == "Unknown"]
dsDiscovery[dsDiscovery$Agent == "Unknown",]
head(dsDiscovery)
dsDiscovery <- rxImport(inData = "./data/DiscoveryAgents.xdf")
# Examine the data
str(dsDiscovery)
table(dsDiscovery$CRMGender)
dsDiscovery$CRMGender[dsDiscovery$CRMGender == "U"] <- NA
table(dsDiscovery$CRMGender)
dsDiscovery[dsDiscovery$CRMGender == "U",]
dsDiscovery <- rxImport(inData = "./data/DiscoveryAgents.xdf")
?rxImport
library(gdata)
dsDiscovery <- rxImport(inData = "./data/DiscoveryAgents.xdf")
head(dsDiscovery)
dsDiscovery[dsDiscovery$CRMGender == "Unknown"]
dsDiscovery[dsDiscovery$CRMGender == "Unknown",]
dsDiscovery[dsDiscovery$CRMGender == "Unknown",]$CRMGender
head(dsDiscovery)
table(dsDiscovery$CRMGender)
dsDiscovery[dsDiscovery$CRMGender == "Unknown",]$CRMGender <- NA
table(dsDiscovery$CRMGender)
dsDiscovery[dsDiscovery$CRMGender == "U",]$CRMGender <- NA
table(dsDiscovery$CRMGender)
summary(dsDiscovery$CRMGender)
summary(dsDiscovery)
dsDiscovery[dsDiscovery$CRMCounty == "--"]$CRMCounty <-NA
dsDiscovery[dsDiscovery$CRMCounty == "--"]$CRMCounty <- NA
str(dsDiscovery)
dsDiscovery[dsDiscovery$CRMCounty == "--",]$CRMCounty <- NA
table(dsDiscovery$CRMCounty)
summary(dsDiscovery$CRMCounty)
summary(dsDiscovery)
summary(dsDiscovery$CRMZipCode)
dsDiscovery[dsDiscovery$CRMZipCode == "-----",]$CRMZipCode <- NA
summary(dsDiscovery$CRMZipCode)
dsDiscovery[dsDiscovery$CRMZipCode == "-----" | dsDiscovery$CRMZipCode == "(Other)",]$CRMZipCode <- NA
dsDiscovery[dsDiscovery$CRMZipCode == "-----" || dsDiscovery$CRMZipCode == "(Other)",]$CRMZipCode <- NA
dsDiscovery[dsDiscovery$CRMZipCode == "-----" or dsDiscovery$CRMZipCode == "(Other)",]$CRMZipCode <- NA
dsDiscovery <- rxImport(inData = "./data/DiscoveryAgents.xdf")
str(dsDiscovery)
summary(dsDiscovery)
dsDiscoveryClean <- dsDiscovery
?rxImport
library(dplyr)
dsDiscoveryClean[1:100,"CRMGender"]
junk<-dsDiscoveryClean[1:100,"CRMGender"]
junk
junk
junk$GenderRecoded <- junk$CRMGender
junk$GenderRecoded <- junk$CRMGender[,]
str(junk)
junk <- cbind(junk$CRMGender, "1")
junk[junk$CRMGender == "U",]
junk <- data.frame(dsDiscoveryClean[1:100, "CRMGender"])
str(junk)
head(junk)
head(junk,15)
names(junk)
names(junk,"Gender")
names(junk)
rename(junk, dsDiscoveryClean.1.100...CRMGender.. = Gender)
dplyr::rename(junk, dsDiscoveryClean.1.100...CRMGender.. = Gender)
dplyr::rename(junk, dsDiscoveryClean.1.100...CRMGender.. = "Gender")
?rename
rename(junk, Gender = dsDiscoveryClean.1.100...CRMGender..)
head(junk, 15)
junk<-rename(junk, Gender = dsDiscoveryClean.1.100...CRMGender..)
head(junk, 15)
junk %>% filter(Gender == "U")
junk %>% mutate(GenderRecoded = Gender)
?transform
head(dsDiscovery)
dsDiscovery[dsDiscovery$CRMCounty == "--",]$CRMCounty <- NA
head(dsDiscovery)
head(dsDiscoveryClean)$CRMGender
head(dsDiscoveryClean$CRMGender)
head(dsDiscoveryClean$CRMGender, 20)
dsDiscoveryClean[dsDiscoveryClean$CRMGender == "U",]$CRMGender <- NA
dsDiscoveryClean[dsDiscoveryClean$CRMCounty == "--",]$CRMCounty <- NA
head(dsDiscoveryClean$CRMGender, 20)
head(dsDiscoveryClean$CRMCounty, 20)
dsDiscoveryClean[dsDiscoveryClean$CRMZipCode == "-----",]$CRMZipCode <- NA
head(dsDiscovery$CRMCounty, 20)
head(dsDiscoveryClean$CRMCounty, 20)
head(dsDiscovery$CRMZipCode, 20)
head(dsDiscoveryClean$CRMZipCode, 20)
head(dsDiscovery$CRMState, 20)
head(dsDiscovery$CRMState, 55)
dsDiscoveryClean[dsDiscoveryClean$CRMState == "--",]$CRMState <- NA
head(dsDiscoveryClean$CRMState, 20)
str(dsDiscovery)
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;UID=SQLserverR_user;PWD=Amerilife01"
sTable <- "staging.SSAS_Discovery_Typed"
dsDiscovery <- RxSqlServerData(connectionString = sConnection, table = sTable,      rowsPerRead = 10000,      stringsAsFactors = FALSE)
rxGetVarInfo(data = dsDiscovery)
# save the file locally in xdf format
rxDataStep(inData = dsDiscovery,      outFile = "./data/DiscoveryAgents.xdf",      overwrite = TRUE)
rm(list=ls())
dsDiscovery <- rxImport(inData = "./data/DiscoveryAgents.xdf")
str(dsDiscovery)
dsDiscoveryClean <- dsDiscovery
head(dsDiscovery$CRMGender, 50)
dsDiscoveryClean[dsDiscoveryClean$CRMGender == "U",]$CRMGender <- NA
head(dsDiscovery$CRMGender, 50)
dsDiscoveryClean$CRMGender == "U"
factor(dsDiscoveryClean$CRMGender, levelss = c("Male", "Female"), labels = c("M", "F"))
factor(dsDiscoveryClean$CRMGender, levels = c("Male", "Female"), labels = c("M", "F"))
head(dsDiscovery$CRMGender, 20)
head(dsDiscoveryClean$CRMGender, 20)
str(dsDiscovery)
as.factor(dsDiscoveryClean$CRMGender, levels = c("Male", "Female"), labels = c("M", "F"))
dsDiscoveryClean$CRMGender <- factor(dsDiscoveryClean$CRMGender, levels = c("Male", "Female"), labels = c("M", "F"))
str(dsDiscovery)
str(dsDiscoveryClean)
dsDiscoveryClean <- dsDiscovery
str(dsDiscoveryClean)
dsDiscoveryClean[dsDiscoveryClean$CRMGender == "U",]$CRMGender <- NA
factor(dsDiscoveryClean$CRMGender, levels = c("Male", "Female"), labels = c("M", "F"))
str(dsDiscoveryClean)
dsDiscoveryClean$CRMGender <- factor(dsDiscoveryClean$CRMGender, levels = c("Male", "Female"), labels = c("M", "F"))
str(dsDiscoveryClean)
table(dsDiscovery$CRMGender)
table(dsDiscoveryClean$CRMGender)
head(dsDiscoveryClean$CRMGender, 20)
table(dsDiscoveryClean$CRMGender, useNA = "yes")
table(dsDiscoveryClean$CRMGender, useNA = TRUE)
table(dsDiscoveryClean$CRMGender, useNA = c("always") )
table(dsDiscovery$CRMGender)
table(dsDiscoveryClean$CRMGender, useNA = c("always"))
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;UID=SQLserverR_user;PWD=Amerilife01"
dsDiscovery <- RxSqlServerData(connectionString = sConnection,     sqlQuery = "select * from staging.SSAS_Discovery_Typed",     rowsPerRead = 10000,     stringsAsFactors = FALSE)
dsDiscovery <- RxSqlServerData(connectionString = sConnection,     sqlQuery = "select * from staging.SSAS_Discovery_Typed",     rowsPerRead = 10000,     stringsAsFactors = FALSE)
rxDataStep(inData = dsDiscovery,      outFile = "./data/DiscoveryAgents.xdf",      overwrite = TRUE)
dsDiscoveryClean$CRMCounty <- factor(dsDiscoveryClean$CRMCounty)
table(dsDiscovery$CRMCounty)
table(dsDiscovery$CRMCounty)
table(dsDiscovery$CRMGender)
table(dsDiscoveryClean$CRMGender, useNA = c("always"))
table(dsDiscoveryClean$CRMCounty, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$CRMCounty == "--",]$CRMCounty <- NA
table(dsDiscoveryClean$CRMCounty, useNA = c("always"))
names(dsDiscoveryClean$CRMCounty)
dsDiscoveryClean$CRMCounty <- factor(dsDiscoveryClean$CRMCounty)
names(dsDiscoveryClean$CRMCounty)
levels(dsDiscoveryClean$CRMCounty)
table(dsDiscoveryClean$CRMCounty, useNA = c("always"))
str(dsDiscoveryClean)
head(dsDiscovery$CRMState, 20)
head(dsDiscoveryClean$CRMState, 20)
head(dsDiscovery$CRMState, 20)
head(dsDiscoveryClean$CRMGState, 100)
head(dsDiscoveryClean$CRMGState)
head(dsDiscoveryClean$CRMState, 100)
str(dsDiscoveryClean)
dsDiscoveryClean$CRMState <- factor(dsDiscoveryClean$CRMState)
str(dsDiscoveryClean)
dsDiscoveryClean[dsDiscoveryClean$CRMState == "--",]$CRMState <- NA
levels(dsDiscoveryClean$CRMState)
str(dsDiscoveryClean)
dsDiscoveryClean$CRMCounty <- factor(dsDiscoveryClean$CRMCounty)
str(dsDiscoveryClean)
head(dsDiscoveryCleand[dsDiscoveryClean$CRMState == "--",])
head(dsDiscoveryClean[dsDiscoveryClean$CRMState == "--",])
head(dsDiscoveryClean$CRMState, 100)
dsDiscoveryClean <- dsDiscovery
str(dsDiscoveryClean)
dsDiscoveryClean[dsDiscoveryClean$CRMGender == "U",]$CRMGender <- NA
rm(list = c("dsDiscoveryClean"))
dsDiscoveryClean <- dsDiscovery
str(dsDiscoveryClean)
dsDiscoveryClean[dsDiscoveryClean$CRMGender == "U",]$CRMGender <- NA
rxGetVarInfo(dsDiscoveryClean)
dsDiscoveryClean[dsDiscoveryClean$CRMGender == "U",]$CRMGender <- NA
dsDiscoveryClean <- data.frame(dsDiscovery)
dsDiscovery <- rxImport(inData = "./data/DiscoveryAgents.xdf")
str(dsDiscovery)
dsDiscoveryClean <- dsDiscovery
rxGetVarInfo(dsDiscoveryClean)
str(dsDiscoveryClean)
dsDiscoveryClean[dsDiscoveryClean$CRMGender == "U",]$CRMGender <- NA
dsDiscoveryClean$CRMGender <- factor(dsDiscoveryClean$CRMGender, levels = c("Male", "Female"), labels = c("M", "F"))
str(dsDiscoveryClean)
dsDiscoveryClean[dsDiscoveryClean$CRMCounty == "--",]$CRMCounty <- NA
dsDiscoveryClean$CRMCounty <- factor(dsDiscoveryClean$CRMCounty)
table(dsDiscoveryClean$CRMGender, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$CRMCounty == "--",]$CRMCounty <- NA
dsDiscoveryClean$CRMCounty <- factor(dsDiscoveryClean$CRMCounty)
levels(dsDiscoveryClean$CRMCounty)
str(dsDiscoveryClean)
dsDiscoveryClean[dsDiscoveryClean$CRMState == "--",]$CRMState <- NA
dsDiscoveryClean$CRMState <- factor(dsDiscoveryClean$CRMState)dsDiscoveryClean[dsDiscoveryClean$CRMState == "--",]$CRMState <- NA
levels(dsDiscoveryClean$CRMState)
dsDiscoveryClean$CRMState <- factor(dsDiscoveryClean$CRMState)
levels(dsDiscoveryClean$CRMState)
table(dsDiscoveryClean$CRMState)
dsDiscoveryClean[dsDiscoveryClean$CRMZipCode == "-----",]$CRMZipCode <- NA
dsDiscoveryClean$CRMZipCode <- factor(dsDiscoveryClean$CRMZipCode)
table(dsDiscoveryClean$CRMZipCode)
dsDiscoveryClean$HasKits <- factor(dsDiscoveryClean$HasKits)
dsDiscoveryClean$HasKits <- factor(dsDiscoveryClean$HasKits, levels = c("Y", "N"), labels = c("Y", "N"))
dsDiscoveryClean$HasContracts <- factor(dsDiscoveryClean$HasContracts, levels = c("Y", "N"), labels = c("Y", "N"))
dsDiscoveryClean$HasCommissionPayments <- factor(dsDiscoveryClean$HasCommissionPayments, levels = c("Y", "N"), labels = c("Y", "N"))
dsDiscoveryClean[dsDiscoveryClean$CarrierGroup == "Unknown"]
dsDiscoveryClean[dsDiscoveryClean$CarrierGroup == "Unknown",]
dsDiscoveryClean[dsDiscoveryClean$CarrierGroup == "Unknown",]$CarrierGroup <- NA
dsDiscoveryClean$CarrierGroup <- factor(dsDiscoveryClean$CarrierGroup)
dsDiscoveryClean[is(dsDiscoveryClean$CarrierGroup),]
levels(dsDiscoveryClean$CarrierGroup)
table(dsDiscoveryClean$CarrierGroup)
table(dsDiscoveryClean$CarrierGroup, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$Carrier == "Unknown",]$Carrier <- NA
dsDiscoveryClean$Carrier <- factor(dsDiscoveryClean$Carrier)
table(dsDiscoveryClean$Carrier, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$Product == "Unknown",]$Product <- NA
dsDiscoveryClean$Product <- factor(dsDiscoveryClean$Product)
table(dsDiscoveryClean$Product, useNA = c("always"))
dsDiscoveryClean$IsDirectContract <- factor(dsDiscoveryClean$IsDirectContract)
dsDiscoveryClean$IsDirectContract <- factor(dsDiscoveryClean$IsDirectContract,      levels = c("Y", "N"), labels = c("Y", "N"))
table(dsDiscoveryClean$IsDirectContract)
dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryAddressType == "U",]$DSCPrimaryAddressType <- NA
dsDiscoveryClean$DSCPrimaryAddressType <- factor(dsDiscoveryClean$DSCPrimaryAddressType)
table(dsDiscoveryClean$DSCPrimaryAddressType, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryCounty == "U",]$DSCPrimaryCounty <- NA
dsDiscoveryClean$DSCPrimaryCounty <- factor(dsDiscoveryClean$DSCPrimaryCounty)
table(dsDiscoveryClean$DSCPrimaryCounty, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryMetropolitanArea == "U",]$DSCPrimaryMetropolitanArea <- NA
dsDiscoveryClean$DSCPrimaryMetropolitanArea <- factor(dsDiscoveryClean$DSCPrimaryMetropolitanArea)
table(dsDiscoveryClean$DSCPrimaryMetropolitanArea, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryZipCode == "U",]$DSCPrimaryZipCode <- NA
dsDiscoveryClean$DSCPrimaryZipCode <- factor(dsDiscoveryClean$DSCPrimaryZipCode)
table(dsDiscoveryClean$DSCPrimaryZipCode, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional == "-1",]$DSCPrimaryZipCode3DigitSectional <- NA
dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional <- factor(dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional)
table(dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$DSCDateOfBirthYear == "-1",]$DSCDateOfBirthYear <- NA
dsDiscoveryClean$DSCDateOfBirthYear <- factor(dsDiscoveryClean$DSCDateOfBirthYear)
table(dsDiscoveryClean$DSCDateOfBirthYear, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$DSCGenderCode == "U",]$DSCGenderCode <- NA
dsDiscoveryClean$DSCGenderCode <- factor(dsDiscoveryClean$DSCGenderCode,     levels = c("1", "2"), labels = c("M", "F"))
table(dsDiscoveryClean$DSCGenderCode, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypeHealth == "U",]$DSCAgentLicenseTypeHealth <- NA
dsDiscoveryClean$DSCAgentLicenseTypeHealth <- factor(dsDiscoveryClean$DSCAgentLicenseTypeHealth,     levels = c("Y", "N"), labels = c("Y", "N")))
dsDiscoveryClean$DSCAgentLicenseTypeHealth <- factor(dsDiscoveryClean$DSCAgentLicenseTypeHealth,     levels = c("Y", "N"), labels = c("Y", "N"))
table(dsDiscoveryClean$DSCAgentLicenseTypeHealth, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypeLife == "U",]$DSCAgentLicenseTypeLife <- NA
dsDiscoveryClean$DSCAgentLicenseTypeLife <- factor(dsDiscoveryClean$DSCAgentLicenseTypeLife,     levels = c("Y", "N"), labels = c("Y", "N"))
table(dsDiscoveryClean$DSCAgentLicenseTypeLife, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts == "U",]$DSCAgentLicenseTypeVariableProducts <- NA
dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts <- factor(dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts,     levels = c("Y", "N"), labels = c("Y", "N"))
table(dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts, useNA = c("always"))
dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty == "U",]$DSCAgentLicenseTypePropertyCasualty <- NA
dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty <- factor(dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty,     levels = c("Y", "N"), labels = c("Y", "N"))
table(dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty, useNA = c("always"))
dsDiscovery <- rxImport(inData = "./data/DiscoveryAgents.xdf")
dsDiscoveryClean <- dsDiscovery
# Recode CRMGender and Convert to Factor dsDiscoveryClean[dsDiscoveryClean$CRMGender == "U",]$CRMGender <- NA dsDiscoveryClean$CRMGender <- factor(dsDiscoveryClean$CRMGender, levels = c("Male", "Female"), labels = c("M", "F")) #
# Recode CRMCounty and convert to factor dsDiscoveryClean[dsDiscoveryClean$CRMCounty == "--",]$CRMCounty <- NA dsDiscoveryClean$CRMCounty <- factor(dsDiscoveryClean$CRMCounty)
# Recode State and convert to factor dsDiscoveryClean[dsDiscoveryClean$CRMState == "--",]$CRMState <- NA dsDiscoveryClean$CRMState <- factor(dsDiscoveryClean$CRMState)
# Recode ZipCode and convert to factor dsDiscoveryClean[dsDiscoveryClean$CRMZipCode == "-----",]$CRMZipCode <- NA dsDiscoveryClean$CRMZipCode <- factor(dsDiscoveryClean$CRMZipCode) # HasKits, Contracts and Commisison Payments conversion to factor dsDiscoveryClean$HasKits <- factor(dsDiscoveryClean$HasKits, levels = c("Y", "N"), labels = c("Y", "N")) dsDiscoveryClean$HasContracts <- factor(dsDiscoveryClean$HasContracts, levels = c("Y", "N"), labels = c("Y", "N")) dsDiscoveryClean$HasCommissionPayments <- factor(dsDiscoveryClean$HasCommissionPayments, levels = c("Y", "N"), labels = c("Y", "N"))
# Recode CarrierGroup and convert to factor dsDiscoveryClean[dsDiscoveryClean$CarrierGroup == "Unknown",]$CarrierGroup <- NA dsDiscoveryClean$CarrierGroup <- factor(dsDiscoveryClean$CarrierGroup)
# Recode Carrier and convert to factor dsDiscoveryClean[dsDiscoveryClean$Carrier == "Unknown",]$Carrier <- NA dsDiscoveryClean$Carrier <- factor(dsDiscoveryClean$Carrier)
# Recode Product and convert to factor dsDiscoveryClean[dsDiscoveryClean$Product == "Unknown",]$Product <- NA dsDiscoveryClean$Product <- factor(dsDiscoveryClean$Product)
# Recode IsDirectContract and convert to factor dsDiscoveryClean$IsDirectContract <- factor(dsDiscoveryClean$IsDirectContract,      levels = c("Y", "N"), labels = c("Y", "N"))
# Recode DSCPrimaryAddressType and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryAddressType == "U",]$DSCPrimaryAddressType <- NA dsDiscoveryClean$DSCPrimaryAddressType <- factor(dsDiscoveryClean$DSCPrimaryAddressType)
# Recode DSCPrimaryCounty and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryCounty == "U",]$DSCPrimaryCounty <- NA dsDiscoveryClean$DSCPrimaryCounty <- factor(dsDiscoveryClean$DSCPrimaryCounty)
# Recode DSCPrimaryMetropolitanArea and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryMetropolitanArea == "U",]$DSCPrimaryMetropolitanArea <- NA dsDiscoveryClean$DSCPrimaryMetropolitanArea <- factor(dsDiscoveryClean$DSCPrimaryMetropolitanArea)
# Recode DSCPrimaryZipCode and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryZipCode == "U",]$DSCPrimaryZipCode <- NA dsDiscoveryClean$DSCPrimaryZipCode <- factor(dsDiscoveryClean$DSCPrimaryZipCode)
# Recode DSCPrimaryZipCode3DigitSectional and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional == "-1",]$DSCPrimaryZipCode3DigitSectional <- NA dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional <- factor(dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional)
# Recode DSCDateOfBirthYear and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCDateOfBirthYear == "-1",]$DSCDateOfBirthYear <- NA dsDiscoveryClean$DSCDateOfBirthYear <- factor(dsDiscoveryClean$DSCDateOfBirthYear)
# Recode DSCGenderCode and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCGenderCode == "U",]$DSCGenderCode <- NA dsDiscoveryClean$DSCGenderCode <- factor(dsDiscoveryClean$DSCGenderCode,     levels = c("1", "2"), labels = c("M", "F"))
# Recode DSCAgentLicenseTypeHealth and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypeHealth == "U",]$DSCAgentLicenseTypeHealth <- NA dsDiscoveryClean$DSCAgentLicenseTypeHealth <- factor(dsDiscoveryClean$DSCAgentLicenseTypeHealth,     levels = c("Y", "N"), labels = c("Y", "N"))
# Recode DSCAgentLicenseTypeLife and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypeLife == "U",]$DSCAgentLicenseTypeLife <- NA dsDiscoveryClean$DSCAgentLicenseTypeLife <- factor(dsDiscoveryClean$DSCAgentLicenseTypeLife,     levels = c("Y", "N"), labels = c("Y", "N"))
# Recode DSCAgentLicenseTypeVariableProducts and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts == "U",]$DSCAgentLicenseTypeVariableProducts <- NA dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts <- factor(dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts,     levels = c("Y", "N"), labels = c("Y", "N")) # table(dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts, useNA = c("always")) # Recode DSCAgentLicenseTypePropertyCasualty and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty == "U",]$DSCAgentLicenseTypePropertyCasualty <- NA dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty <- factor(dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty,     levels = c("Y", "N"), labels = c("Y", "N")) # table(dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty, useNA = c("always"))
dsDiscoveryClean <- dsDiscovery
# Recode CRMGender and Convert to Factor dsDiscoveryClean[dsDiscoveryClean$CRMGender == "U",]$CRMGender <- NA dsDiscoveryClean$CRMGender <- factor(dsDiscoveryClean$CRMGender, levels = c("Male", "Female"), labels = c("M", "F")) # review results of the recoding and conversion str(dsDiscoveryClean) #table(dsDiscoveryClean$CRMGender, useNA = c("always")) # Recode CRMCounty and convert to factor dsDiscoveryClean[dsDiscoveryClean$CRMCounty == "--",]$CRMCounty <- NA dsDiscoveryClean$CRMCounty <- factor(dsDiscoveryClean$CRMCounty) #levels(dsDiscoveryClean$CRMCounty) #table(dsDiscoveryClean$CRMCounty, useNA = c("always")) # Recode State and convert to factor dsDiscoveryClean[dsDiscoveryClean$CRMState == "--",]$CRMState <- NA dsDiscoveryClean$CRMState <- factor(dsDiscoveryClean$CRMState) #levels(dsDiscoveryClean$CRMState) #table(dsDiscoveryClean$CRMState) # Recode ZipCode and convert to factor dsDiscoveryClean[dsDiscoveryClean$CRMZipCode == "-----",]$CRMZipCode <- NA dsDiscoveryClean$CRMZipCode <- factor(dsDiscoveryClean$CRMZipCode) # HasKits, Contracts and Commisison Payments conversion to factor dsDiscoveryClean$HasKits <- factor(dsDiscoveryClean$HasKits, levels = c("Y", "N"), labels = c("Y", "N")) dsDiscoveryClean$HasContracts <- factor(dsDiscoveryClean$HasContracts, levels = c("Y", "N"), labels = c("Y", "N")) dsDiscoveryClean$HasCommissionPayments <- factor(dsDiscoveryClean$HasCommissionPayments, levels = c("Y", "N"), labels = c("Y", "N")) # Recode CarrierGroup and convert to factor dsDiscoveryClean[dsDiscoveryClean$CarrierGroup == "Unknown",]$CarrierGroup <- NA dsDiscoveryClean$CarrierGroup <- factor(dsDiscoveryClean$CarrierGroup) # levels(dsDiscoveryClean$CarrierGroup) # table(dsDiscoveryClean$CarrierGroup, useNA = c("always")) # Recode Carrier and convert to factor dsDiscoveryClean[dsDiscoveryClean$Carrier == "Unknown",]$Carrier <- NA dsDiscoveryClean$Carrier <- factor(dsDiscoveryClean$Carrier) # levels(dsDiscoveryClean$Carrier) # table(dsDiscoveryClean$Carrier, useNA = c("always")) # Recode Product and convert to factor dsDiscoveryClean[dsDiscoveryClean$Product == "Unknown",]$Product <- NA dsDiscoveryClean$Product <- factor(dsDiscoveryClean$Product) # levels(dsDiscoveryClean$Product) # table(dsDiscoveryClean$Product, useNA = c("always")) # Recode IsDirectContract and convert to factor dsDiscoveryClean$IsDirectContract <- factor(dsDiscoveryClean$IsDirectContract,      levels = c("Y", "N"), labels = c("Y", "N")) # table(dsDiscoveryClean$IsDirectContract) # Recode DSCPrimaryAddressType and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryAddressType == "U",]$DSCPrimaryAddressType <- NA dsDiscoveryClean$DSCPrimaryAddressType <- factor(dsDiscoveryClean$DSCPrimaryAddressType) table(dsDiscoveryClean$DSCPrimaryAddressType, useNA = c("always")) # Recode DSCPrimaryCounty and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryCounty == "U",]$DSCPrimaryCounty <- NA dsDiscoveryClean$DSCPrimaryCounty <- factor(dsDiscoveryClean$DSCPrimaryCounty) # table(dsDiscoveryClean$DSCPrimaryCounty, useNA = c("always")) # Recode DSCPrimaryMetropolitanArea and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryMetropolitanArea == "U",]$DSCPrimaryMetropolitanArea <- NA dsDiscoveryClean$DSCPrimaryMetropolitanArea <- factor(dsDiscoveryClean$DSCPrimaryMetropolitanArea) # table(dsDiscoveryClean$DSCPrimaryMetropolitanArea, useNA = c("always")) # Recode DSCPrimaryZipCode and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryZipCode == "U",]$DSCPrimaryZipCode <- NA dsDiscoveryClean$DSCPrimaryZipCode <- factor(dsDiscoveryClean$DSCPrimaryZipCode) # table(dsDiscoveryClean$DSCPrimaryZipCode, useNA = c("always")) # Recode DSCPrimaryZipCode3DigitSectional and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional == "-1",]$DSCPrimaryZipCode3DigitSectional <- NA dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional <- factor(dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional) # table(dsDiscoveryClean$DSCPrimaryZipCode3DigitSectional, useNA = c("always")) # Recode DSCDateOfBirthYear and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCDateOfBirthYear == "-1",]$DSCDateOfBirthYear <- NA dsDiscoveryClean$DSCDateOfBirthYear <- factor(dsDiscoveryClean$DSCDateOfBirthYear) # table(dsDiscoveryClean$DSCDateOfBirthYear, useNA = c("always")) # Recode DSCGenderCode and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCGenderCode == "U",]$DSCGenderCode <- NA dsDiscoveryClean$DSCGenderCode <- factor(dsDiscoveryClean$DSCGenderCode,     levels = c("1", "2"), labels = c("M", "F")) # table(dsDiscoveryClean$DSCGenderCode, useNA = c("always")) # Recode DSCAgentLicenseTypeHealth and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypeHealth == "U",]$DSCAgentLicenseTypeHealth <- "N" dsDiscoveryClean$DSCAgentLicenseTypeHealth <- factor(dsDiscoveryClean$DSCAgentLicenseTypeHealth,     levels = c("Y", "N"), labels = c("Y", "N")) # table(dsDiscoveryClean$DSCAgentLicenseTypeHealth, useNA = c("always")) # Recode DSCAgentLicenseTypeLife and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypeLife == "U",]$DSCAgentLicenseTypeLife <- "N" dsDiscoveryClean$DSCAgentLicenseTypeLife <- factor(dsDiscoveryClean$DSCAgentLicenseTypeLife,     levels = c("Y", "N"), labels = c("Y", "N")) # table(dsDiscoveryClean$DSCAgentLicenseTypeLife, useNA = c("always")) # Recode DSCAgentLicenseTypeVariableProducts and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts == "U",]$DSCAgentLicenseTypeVariableProducts <- "N" dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts <- factor(dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts,     levels = c("Y", "N"), labels = c("Y", "N")) # table(dsDiscoveryClean$DSCAgentLicenseTypeVariableProducts, useNA = c("always")) # Recode DSCAgentLicenseTypePropertyCasualty and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty == "U",]$DSCAgentLicenseTypePropertyCasualty <- "N" dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty <- factor(dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty,     levels = c("Y", "N"), labels = c("Y", "N")) # table(dsDiscoveryClean$DSCAgentLicenseTypePropertyCasualty, useNA = c("always"))
str(dsDiscoveryClean)
dsDiscoveryClean[dsDiscoveryClean$DSCNumberStateLicensesHealth == -1,]$DSCNumberStateLicensesHealth <- 0
str(dsDiscoveryClean)
dsDiscoveryClean[dsDiscoveryClean$DSCNumberStateLicensesLife == -1,]$DSCNumberStateLicensesLife <- 0
dsDiscoveryClean[dsDiscoveryClean$DSCNumberStateLicensesVariableProducts == -1,]$DSCNumberStateLicensesVariableProducts <- 0 dsDiscoveryClean[dsDiscoveryClean$DSCNumberStateLicensesPropertyCasualty == -1,]$DSCNumberStateLicensesPropertyCasualty <- 0
dsDiscoveryClean[dsDiscoveryClean$DSCStateLicensedCount == -1,]$DSCStateLicensedCount <- 0
# Recode DSCSellsRetirementPlanProducts and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCSellsRetirementPlanProducts == "U",]$DSCSellsRetirementPlanProducts <- NA dsDiscoveryClean$DSCSellsRetirementPlanProducts <- factor(dsDiscoveryClean$DSCSellsRetirementPlanProducts,     levels = c("Y", "N"), labels = c("Y", "N"))
dsDiscoveryClean[dsDiscoveryClean$DSCAppointmentCount == -1,]$DSCAppointmentCount <- NA
dsDiscoveryClean[dsDiscoveryClean$DSCYearsOfExperience == -1,]$DSCYearsOfExperience <- NA
dsDiscoveryClean[dsDiscoveryClean$DSCEarliestAppointmentDate == "1900-01-01",]$DSCEarliestAppointmentDate <- NA
# Convert DSCDuallyLicensed and DSCInCRD into factors dsDiscoveryClean$DSCDuallyLicensed <- factor(dsDiscoveryClean$DSCDuallyLicensed,     levels = c("Y", "N"), labels = c("Y", "N")) dsDiscoveryClean$DSCInCRD <- factor(dsDiscoveryClean$DSCInCRD,     levels = c("Y", "N"), labels = c("Y", "N"))
# Recode DSCRIAAffiliation and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCRIAAffiliation == "U",]$DSCRIAAffiliation <- NA dsDiscoveryClean$DSCRIAAffiliation <- factor(dsDiscoveryClean$DSCRIAAffiliation)
# Recode DSCBrokerDealerAffiliation and convert to factor dsDiscoveryClean[dsDiscoveryClean$DSCBrokerDealerAffiliation == "U",]$DSCBrokerDealerAffiliation <- NA dsDiscoveryClean$DSCBrokerDealerAffiliation <- factor(dsDiscoveryClean$DSCBrokerDealerAffiliation)
source("~/visual studio 2015/projects/Pick Agents/Pick Agents/code/loadXDF.R", encoding = "Windows-1252")
dfDiscovery <- rxImport(inData = "./data/DiscoveryAgentsRecoded.xdf")
rxGetVarInfo(dfDiscovery)
str(dfDiscovery)
dsDiscoveryClean$CRMCounty <- factor(dsDiscoveryClean$CRMCounty)
source("~/visual studio 2015/projects/Pick Agents/Pick Agents/code/loadXDF.R", encoding = "Windows-1252")
rm(list = ls())
dfDiscovery <- rxImport(inData = "./data/DiscoveryAgentsRecoded.xdf")
str(dfDiscovery)
summary(dfDiscovery)
source("~/visual studio 2015/projects/Pick Agents/Pick Agents/code/loadXDF.R", encoding = "Windows-1252")
rm(ls())
rm(list=ls())
dfDiscovery <- rxImport(inData = "./data/DiscoveryAgentsRecoded.xdf")
summary(dfDiscovery)
library(dplyr)
head(dfDiscovery)
row.names(dfDiscovery) <- dfDiscovery$pk
head(dfDiscovery)
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;UID=SQLserverR_user;PWD=Amerilife01"
sqlDestinationTable = "staging.SSAS_Discovery_Recoded"
rxDataStep(inData = dfDiscovery,     outFile = sqlDestinationTable,     overwrite = TRUE)
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;UID=SQLserverR_user;PWD=Amerilife01"
sqlDestinationTable = "staging.SSAS_Discovery_Recoded"
sqlDataTableWrite <- RxSqlServerData(connectionString = sConnection,     table = sqlDestinationTable)
rxDataStep(inData = dfDiscovery,     outFile = sqlDataTableWrite,     overwrite = TRUE)
rxDataStep(inData = dfDiscovery,     outFile = sqlDataTableWrite,     overwrite = TRUE)
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;Trusted_Connection=TRUE"
sqlDestinationTable = "staging.SSAS_Discovery_Recoded"
sqlDataTableWrite <- RxSqlServerData(connectionString = sConnection,     table = sqlDestinationTable)
rxDataStep(inData = dfDiscovery,     outFile = sqlDataTableWrite,     overwrite = TRUE)
source("~/visual studio 2015/projects/Pick Agents/Pick Agents/code/loadXDF.R", encoding = "Windows-1252")
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;Trusted_Connection=TRUE" sqlDestinationTable = "staging.SSAS_Discovery_Recoded_jf" sqlDataTableWrite <- RxSqlServerData(connectionString = sConnection,     table = sqlDestinationTable) rxDataStep(inData = dsDiscoveryClean,     outFile = sqlDataTableWrite,     overwrite = TRUE)
df <- rxImport(inData = sqlDataTableWrite,     rowsPerRead = 10000,     stringsAsFactors = TRUE)
str(df)
str(dfDiscovery)
# load XDF file #dfDiscovery <- rxImport(inData = "./data/DiscoveryAgentsRecoded.xdf") # load the data form SQL Server sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;Trusted_Connection=TRUE" sqlTableName = "staging.SSAS_Discovery_Recoded" sqlDataTable <- RxSqlServerData(connectionString = sConnection,     table = sqlTableName) df <- rxImport(inData = sqlDataTableWrite,     rowsPerRead = 10000,     stringsAsFactors = TRUE) #rxGetVarInfo(df) str(df) #summary(df)
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;Trusted_Connection=TRUE" sqlTableName = "staging.SSAS_Discovery_Recoded" sqlDataTable <- RxSqlServerData(connectionString = sConnection,     table = sqlTableName) df <- rxImport(inData = sqlDataTable,     rowsPerRead = 10000,     stringsAsFactors = TRUE) #rxGetVarInfo(df) str(df) #summary(df)
rm(list = ls())
# load XDF file #dfDiscovery <- rxImport(inData = "./data/DiscoveryAgentsRecoded.xdf") # load the data form SQL Server sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;Trusted_Connection=TRUE" sqlTableName <- "staging.SSAS_Discovery_Recoded" # Summarize the data by Agent and only for direct contracts sQuery <- " SELECT  [pk] = MIN([pk]) ,[Agent] = MIN([Agent]) ,[NPN] ,[CRMGender] = MIN([CRMGender]) ,[CRMCounty] = MIN([CRMCounty]) ,[CRMState] = MIN([CRMState]) ,[CRMZipCode] = MIN([CRMZipCode]) ,[HasKits] = MAX([HasKits]) ,[HasContracts] = MAX([HasContracts]) ,[HasCommissionPayments] = MAX([HasCommissionPayments]) ,[DSCPrimaryAddressType] = MIN([DSCPrimaryAddressType]) ,[DSCPrimaryCounty] = MIN([DSCPrimaryCounty]) ,[DSCPrimaryMetropolitanArea] = MIN([DSCPrimaryMetropolitanArea]) ,[DSCPrimaryZipCode] = MIN([DSCPrimaryZipCode]) ,[DSCPrimaryZipCode3DigitSectional] = MIN([DSCPrimaryZipCode3DigitSectional]) ,[DSCDateOfBirthYear] = MIN([DSCDateOfBirthYear]) ,[DSCGenderCode] = MIN([DSCGenderCode]) ,[DSCAgentLicenseTypeHealth] = MIN([DSCAgentLicenseTypeHealth]) ,[DSCAgentLicenseTypeLife] = MIN([DSCAgentLicenseTypeLife]) ,[DSCAgentLicenseTypeVariableProducts] = MIN([DSCAgentLicenseTypeVariableProducts]) ,[DSCAgentLicenseTypePropertyCasualty] = MIN([DSCAgentLicenseTypePropertyCasualty]) ,[DSCNumberStateLicensesHealth] = MIN([DSCNumberStateLicensesHealth]) ,[DSCNumberStateLicensesLife] = MIN([DSCNumberStateLicensesLife]) ,[DSCNumberStateLicensesVariableProducts] = MIN([DSCNumberStateLicensesVariableProducts]) ,[DSCNumberStateLicensesPropertyCasualty] = MIN([DSCNumberStateLicensesPropertyCasualty]) ,[DSCStateLicensedCount] = MIN([DSCStateLicensedCount]) ,[DSCSellsRetirementPlanProducts] = MIN([DSCSellsRetirementPlanProducts]) ,[DSCCarrierAppointments] = MIN([DSCCarrierAppointments]) ,[DSCAppointmentCount] = MIN([DSCAppointmentCount]) ,[DSCYearsOfExperience] = MIN([DSCYearsOfExperience]) ,[DSCEarliestAppointmentDate] = MIN([DSCEarliestAppointmentDate]) ,[DSCDuallyLicensed] = MIN([DSCDuallyLicensed]) ,[DSCInCRD] = MIN([DSCInCRD]) ,[DSCRIAAffiliation] = MIN([DSCRIAAffiliation]) ,[DSCBDRIARep] = MIN([DSCBDRIARep]) ,[DSCBrokerDealerAffiliation] = MIN([DSCBrokerDealerAffiliation]) ,[12MonthRevenueFromContractCompleted] = SUM([12MonthRevenueFromContractCompleted]) ,[12MonthRevenueFromContractEffective] = SUM([12MonthRevenueFromContractEffective]) ,[12MonthFromFirstRevenue] = SUM([12MonthFromFirstRevenue]) ,[24MonthRevenueFromContractCompleted] = SUM([24MonthRevenueFromContractCompleted]) ,[24MonthRevenueFromContractEffective] = SUM([24MonthRevenueFromContractEffective]) ,[24MonthFromFirstRevenue] = SUM([24MonthFromFirstRevenue]) ,[RevenueSinceInception] = SUM([RevenueSinceInception]) ,[PolicyCount] = SUM([PolicyCount]) ,[Payments] = SUM([Payments]) ,[Commission] = SUM([Commission]) ,[PaymentCountSinceInception] = SUM([PaymentCountSinceInception]) ,RecordCount = COUNT(*) FROM [staging].[SSAS_Discovery_Recoded] where IsDirectContract = 'Y' group by NPN order by NPN" sqlDataTable <- RxSqlServerData(connectionString = sConnection,     sqlQuery = sQuery)     #table = sqlTableName) df <- rxImport(inData = sqlDataTable,     rowsPerRead = 10000,     stringsAsFactors = TRUE) #rxGetVarInfo(df) str(df) #summary(df)
library(ggplot2)
library(car)
library(dplyr)
str(df)
summary(df)
row.names(df) <- df$pk
str(df)
summary(df)
df
dfBase <- df %>% select(starts_with("CRM"), starts_with("Has"), starts_with("DSC"), contains("Revenue"),      c("PolicyCount", "Payments", "Commission", "PaymentCountSinceInception", "RecordCount"))
dfBase <- df %>% select(starts_with("CRM"), starts_with("Has"), starts_with("DSC"), contains("Revenue"),      "PolicyCount", "Payments", "Commission", "PaymentCountSinceInception", "RecordCount")
?dplyr::select
dfBase <- df %>% select(starts_with("CRM"), starts_with("Has"), starts_with("DSC"), contains("Revenue"),      PolicyCount, Payments, "Commission", "PaymentCountSinceInception", "RecordCount")
dfBase <- df %>% select(starts_with("CRM"), starts_with("Has"), starts_with("DSC"), contains("Revenue"),      PolicyCount, Payments, Commission, PaymentCountSinceInception, RecordCount)
scatterplotMatrix(dfBase, diagonal = "histogram")
paird(dfBase)
pairs(dfBase)
save(dfBase, file = "./data/dfBase.Rda")
?scatter
?scatterplotMatrix
scatterplotMatrix(dfBase[,], diagonal = "histogram")
dfBase <- df %>% select(starts_with("CRM"),     PolicyCount, Payments, Commission, PaymentCountSinceInception, RecordCount)
scatterplotMatrix(dfBase[,], diagonal = "histogram")
dfBase <- df %>% select(CRMGender, CRMState, DSCPrimaryAddressType, DSCNumberStateLicensesHealth, DSCNumberStateLicensesLife, DSCNumberStateLicensesVariableProducts,  DSCNumberStateLicensesPropertyCasualty, Commission)
scatterplotMatrix(dfBase[,], diagonal = "histogram")
library(corrplot)
library(gplots)
corrplot.mixed(corr = cor(dfBase[, c(1, 2, 4, 8)]),     upper = "ellipse", tl.pos = "lt")
corrplot.mixed(corr = cor(dfBase[, c( 4, 8)]),     upper = "ellipse", tl.pos = "lt")
corrplot.mixed(corr = cor(dfBase[, c( 4, 8)]),     upper = "ellipse", tl.pos = "lt",     col = colorpanel(50, "red", "gray60", "blue4"))
corrplot.mixed(corr = cor(dfBase[, c( 4:8 )]),     upper = "ellipse", tl.pos = "lt",     col = colorpanel(50, "red", "gray60", "blue4"))
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;Trusted_Connection=TRUE"
sQuery <- " SELECT  [pk] = MIN([pk]) ,[Agent] = MIN([Agent]) ,[NPN] ,[CRMGender] = MIN([CRMGender]) ,[CRMCounty] = MIN([CRMCounty]) ,[CRMState] = MIN([CRMState]) ,[CRMZipCode] = MIN([CRMZipCode]) ,[HasKits] = MAX([HasKits]) ,[HasContracts] = MAX([HasContracts]) ,[HasCommissionPayments] = MAX([HasCommissionPayments]) ,[DSCPrimaryAddressType] = MIN([DSCPrimaryAddressType]) ,[DSCPrimaryCounty] = MIN([DSCPrimaryCounty]) ,[DSCPrimaryMetropolitanArea] = MIN([DSCPrimaryMetropolitanArea]) ,[DSCPrimaryZipCode] = MIN([DSCPrimaryZipCode]) ,[DSCPrimaryZipCode3DigitSectional] = MIN([DSCPrimaryZipCode3DigitSectional]) ,[DSCDateOfBirthYear] = MIN([DSCDateOfBirthYear]) ,[DSCGenderCode] = MIN([DSCGenderCode]) ,[DSCAgentLicenseTypeHealth] = MIN([DSCAgentLicenseTypeHealth]) ,[DSCAgentLicenseTypeLife] = MIN([DSCAgentLicenseTypeLife]) ,[DSCAgentLicenseTypeVariableProducts] = MIN([DSCAgentLicenseTypeVariableProducts]) ,[DSCAgentLicenseTypePropertyCasualty] = MIN([DSCAgentLicenseTypePropertyCasualty]) ,[DSCNumberStateLicensesHealth] = MIN([DSCNumberStateLicensesHealth]) ,[DSCNumberStateLicensesLife] = MIN([DSCNumberStateLicensesLife]) ,[DSCNumberStateLicensesVariableProducts] = MIN([DSCNumberStateLicensesVariableProducts]) ,[DSCNumberStateLicensesPropertyCasualty] = MIN([DSCNumberStateLicensesPropertyCasualty]) ,[DSCStateLicensedCount] = MIN([DSCStateLicensedCount]) ,[DSCSellsRetirementPlanProducts] = MIN([DSCSellsRetirementPlanProducts]) ,[DSCCarrierAppointments] = MIN([DSCCarrierAppointments]) ,[DSCAppointmentCount] = MIN([DSCAppointmentCount]) ,[DSCYearsOfExperience] = MIN([DSCYearsOfExperience]) ,[DSCEarliestAppointmentDate] = MIN([DSCEarliestAppointmentDate]) ,[DSCDuallyLicensed] = MIN([DSCDuallyLicensed]) ,[DSCInCRD] = MIN([DSCInCRD]) ,[DSCRIAAffiliation] = MIN([DSCRIAAffiliation]) ,[DSCBDRIARep] = MIN([DSCBDRIARep]) ,[DSCBrokerDealerAffiliation] = MIN([DSCBrokerDealerAffiliation]) ,[12MonthRevenueFromContractCompleted] = SUM([12MonthRevenueFromContractCompleted]) ,[12MonthRevenueFromContractEffective] = SUM([12MonthRevenueFromContractEffective]) ,[12MonthFromFirstRevenue] = SUM([12MonthFromFirstRevenue]) ,[24MonthRevenueFromContractCompleted] = SUM([24MonthRevenueFromContractCompleted]) ,[24MonthRevenueFromContractEffective] = SUM([24MonthRevenueFromContractEffective]) ,[24MonthFromFirstRevenue] = SUM([24MonthFromFirstRevenue]) ,[RevenueSinceInception] = SUM([RevenueSinceInception]) ,[PolicyCount] = SUM([PolicyCount]) ,[Payments] = SUM([Payments]) ,[Commission] = SUM([Commission]) ,[PaymentCountSinceInception] = SUM([PaymentCountSinceInception]) ,RecordCount = COUNT(*) FROM [staging].[SSAS_Discovery_Recoded] where IsDirectContract = 'Y' group by NPN " sqlDataTable <- RxSqlServerData(connectionString = sConnection,     sqlQuery = sQuery)
df <- rxImport(inData = sqlDataTable,     rowsPerRead = 10000,     stringsAsFactors = TRUE)
# Common libraries library(ggplot2) library(car) library(dplyr) library(corrplot) library(gplots) # Set the row names to the pk from SQL row.names(df) <- df$pk #rxGetVarInfo(df) str(df)
summary(df)
sQuery <- "
sQuery <- "
sQuery <- "
sQuery <- "
sQuery <- "
sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;Trusted_Connection=TRUE" sqlTableName <- "staging.SSAS_Discovery_Recoded" # Summarize the data by Agent  sQuery <- " SELECT  [pk] = MIN([pk]) ,[Agent] = MIN([Agent]) ,[NPN] ,[CRMGender] = MIN([CRMGender]) ,[CRMCounty] = MIN([CRMCounty]) ,[CRMState] = MIN([CRMState]) ,[CRMZipCode] = MIN([CRMZipCode]) ,[HasKits] = MAX([HasKits]) ,[HasContracts] = MAX([HasContracts]) ,[HasCommissionPayments] = MAX([HasCommissionPayments]) ,[DSCPrimaryAddressType] = MIN([DSCPrimaryAddressType]) ,[DSCPrimaryCounty] = MIN([DSCPrimaryCounty]) ,[DSCPrimaryMetropolitanArea] = MIN([DSCPrimaryMetropolitanArea]) ,[DSCPrimaryZipCode] = MIN([DSCPrimaryZipCode]) ,[DSCPrimaryZipCode3DigitSectional] = MIN([DSCPrimaryZipCode3DigitSectional]) ,[DSCDateOfBirthYear] = MIN([DSCDateOfBirthYear]) ,[DSCGenderCode] = MIN([DSCGenderCode]) ,[DSCAgentLicenseTypeHealth] = MIN([DSCAgentLicenseTypeHealth]) ,[DSCAgentLicenseTypeLife] = MIN([DSCAgentLicenseTypeLife]) ,[DSCAgentLicenseTypeVariableProducts] = MIN([DSCAgentLicenseTypeVariableProducts]) ,[DSCAgentLicenseTypePropertyCasualty] = MIN([DSCAgentLicenseTypePropertyCasualty]) ,[DSCNumberStateLicensesHealth] = MIN([DSCNumberStateLicensesHealth]) ,[DSCNumberStateLicensesLife] = MIN([DSCNumberStateLicensesLife]) ,[DSCNumberStateLicensesVariableProducts] = MIN([DSCNumberStateLicensesVariableProducts]) ,[DSCNumberStateLicensesPropertyCasualty] = MIN([DSCNumberStateLicensesPropertyCasualty]) ,[DSCStateLicensedCount] = MIN([DSCStateLicensedCount]) ,[DSCSellsRetirementPlanProducts] = MIN([DSCSellsRetirementPlanProducts]) ,[DSCCarrierAppointments] = MIN([DSCCarrierAppointments]) ,[DSCAppointmentCount] = MIN([DSCAppointmentCount]) ,[DSCYearsOfExperience] = MIN([DSCYearsOfExperience]) ,[DSCEarliestAppointmentDate] = MIN([DSCEarliestAppointmentDate]) ,[DSCDuallyLicensed] = MIN([DSCDuallyLicensed]) ,[DSCInCRD] = MIN([DSCInCRD]) ,[DSCRIAAffiliation] = MIN([DSCRIAAffiliation]) ,[DSCBDRIARep] = MIN([DSCBDRIARep]) ,[DSCBrokerDealerAffiliation] = MIN([DSCBrokerDealerAffiliation]) ,[12MonthRevenueFromContractCompleted] = SUM([12MonthRevenueFromContractCompleted]) ,[12MonthRevenueFromContractEffective] = SUM([12MonthRevenueFromContractEffective]) ,[12MonthFromFirstRevenue] = SUM([12MonthFromFirstRevenue]) ,[24MonthRevenueFromContractCompleted] = SUM([24MonthRevenueFromContractCompleted]) ,[24MonthRevenueFromContractEffective] = SUM([24MonthRevenueFromContractEffective]) ,[24MonthFromFirstRevenue] = SUM([24MonthFromFirstRevenue]) ,[RevenueSinceInception] = SUM([RevenueSinceInception]) ,[PolicyCount] = SUM([PolicyCount]) ,[Payments] = SUM([Payments]) ,[Commission] = SUM([Commission]) ,[PaymentCountSinceInception] = SUM([PaymentCountSinceInception]) ,RecordCount = COUNT(*) FROM [staging].[SSAS_Discovery_Recoded] group by NPN " sqlDataTable <- RxSqlServerData(connectionString = sConnection,     sqlQuery = sQuery)     #table = sqlTableName) df <- rxImport(inData = sqlDataTable,     rowsPerRead = 10000,     stringsAsFactors = TRUE) # Common libraries library(ggplot2) library(car) library(dplyr) library(corrplot) library(gplots) # Set the row names to the pk from SQL row.names(df) <- df$pk #rxGetVarInfo(df) str(df)
summary(df)
summary(df$12MonthRevenueFromContractCompleted)
summary(df$Commission)
summary(df$"12MonthRevenueFromContractCompleted")
summary(df$"24MonthRevenueFromContractCompleted")
summary(df$PaymentCountSinceInception)
summary(df$RevenueSinceInception)
ggplot(aes(df$RevenueSinceInception)) + geom_hist()
ggplot(data = df, aes(x = RevenueSinceInception)) + geom_hist()
# load the data form SQL Server sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;Trusted_Connection=TRUE" sqlTableName <- "staging.SSAS_Discovery_Recoded" # Summarize the data by Agent  sQuery <- " SELECT  [pk] = MIN([pk]) ,[Agent] = MIN([Agent]) ,[NPN] ,[CRMGender] = MIN([CRMGender]) ,[CRMCounty] = MIN([CRMCounty]) ,[CRMState] = MIN([CRMState]) ,[CRMZipCode] = MIN([CRMZipCode]) ,[HasKits] = MAX([HasKits]) ,[HasContracts] = MAX([HasContracts]) ,[HasCommissionPayments] = MAX([HasCommissionPayments]) ,[DSCPrimaryAddressType] = MIN([DSCPrimaryAddressType]) ,[DSCPrimaryCounty] = MIN([DSCPrimaryCounty]) ,[DSCPrimaryMetropolitanArea] = MIN([DSCPrimaryMetropolitanArea]) ,[DSCPrimaryZipCode] = MIN([DSCPrimaryZipCode]) ,[DSCPrimaryZipCode3DigitSectional] = MIN([DSCPrimaryZipCode3DigitSectional]) ,[DSCDateOfBirthYear] = MIN([DSCDateOfBirthYear]) ,[DSCGenderCode] = MIN([DSCGenderCode]) ,[DSCAgentLicenseTypeHealth] = MIN([DSCAgentLicenseTypeHealth]) ,[DSCAgentLicenseTypeLife] = MIN([DSCAgentLicenseTypeLife]) ,[DSCAgentLicenseTypeVariableProducts] = MIN([DSCAgentLicenseTypeVariableProducts]) ,[DSCAgentLicenseTypePropertyCasualty] = MIN([DSCAgentLicenseTypePropertyCasualty]) ,[DSCNumberStateLicensesHealth] = MIN([DSCNumberStateLicensesHealth]) ,[DSCNumberStateLicensesLife] = MIN([DSCNumberStateLicensesLife]) ,[DSCNumberStateLicensesVariableProducts] = MIN([DSCNumberStateLicensesVariableProducts]) ,[DSCNumberStateLicensesPropertyCasualty] = MIN([DSCNumberStateLicensesPropertyCasualty]) ,[DSCStateLicensedCount] = MIN([DSCStateLicensedCount]) ,[DSCSellsRetirementPlanProducts] = MIN([DSCSellsRetirementPlanProducts]) ,[DSCCarrierAppointments] = MIN([DSCCarrierAppointments]) ,[DSCAppointmentCount] = MIN([DSCAppointmentCount]) ,[DSCYearsOfExperience] = MIN([DSCYearsOfExperience]) ,[DSCEarliestAppointmentDate] = MIN([DSCEarliestAppointmentDate]) ,[DSCDuallyLicensed] = MIN([DSCDuallyLicensed]) ,[DSCInCRD] = MIN([DSCInCRD]) ,[DSCRIAAffiliation] = MIN([DSCRIAAffiliation]) ,[DSCBDRIARep] = MIN([DSCBDRIARep]) ,[DSCBrokerDealerAffiliation] = MIN([DSCBrokerDealerAffiliation]) ,[12MonthRevenueFromContractCompleted] = SUM([12MonthRevenueFromContractCompleted]) ,[12MonthRevenueFromContractEffective] = SUM([12MonthRevenueFromContractEffective]) ,[12MonthFromFirstRevenue] = SUM([12MonthFromFirstRevenue]) ,[24MonthRevenueFromContractCompleted] = SUM([24MonthRevenueFromContractCompleted]) ,[24MonthRevenueFromContractEffective] = SUM([24MonthRevenueFromContractEffective]) ,[24MonthFromFirstRevenue] = SUM([24MonthFromFirstRevenue]) ,[RevenueSinceInception] = SUM([RevenueSinceInception]) ,[PolicyCount] = SUM([PolicyCount]) ,[Payments] = SUM([Payments]) ,[Commission] = SUM([Commission]) ,[PaymentCountSinceInception] = SUM([PaymentCountSinceInception]) ,RecordCount = COUNT(*) FROM [staging].[SSAS_Discovery_Recoded] group by NPN " sqlDataTable <- RxSqlServerData(connectionString = sConnection,     sqlQuery = sQuery)     #table = sqlTableName) df <- rxImport(inData = sqlDataTable,     rowsPerRead = 10000,     stringsAsFactors = TRUE) # Common libraries library(ggplot2) library(car) library(dplyr) library(corrplot) library(gplots) # Set the row names to the pk from SQL row.names(df) <- df$pk
summary(df$RevenueSinceInception)
ggplot(data = df, aes(x = RevenueSinceInception)) + geom_hist()
ggplot(data = df, aes(x = RevenueSinceInception)) + geom_histogram()
ggplot(data = df, aes(x = RevenueSinceInception)) + geom_histogram(binwidth = 100)
df %>% filter(RevenueSinceInception <= 1000) %>% ggplot(data = df, aes(x = RevenueSinceInception)) + geom_histogram(binwidth = 100)
dfPlot <- df %>% filter(RevenueSinceInception <= 1000)
dfPlot <- df %>% filter(RevenueSinceInception <= 1000) %>% select(RevenueSinceInception)
ggplot(data = dfPlot, aes(x = RevenueSinceInception)) + geom_histogram(binwidth = 100)
dfPlot <- df %>% select(RevenueSinceInception) %>% filter(RevenueSinceInception <= 1000 & RevenueSinceInception >= 0) 
ggplot(data = dfPlot, aes(x = RevenueSinceInception)) + geom_histogram(binwidth = 100)
ggplot(data = dfPlot, aes(x = RevenueSinceInception)) + geom_histogram(binwidth = 50)
ggplot(data = dfPlot, aes(x = RevenueSinceInception)) + geom_histogram(binwidth = 10)
dfPlot <- df %>% select(RevenueSinceInception) %>% filter(RevenueSinceInception <= 500 & RevenueSinceInception >= 0) 
ggplot(data = dfPlot, aes(x = RevenueSinceInception)) + geom_histogram(binwidth = 10)
ggplot(data = dfPlot, aes(x = RevenueSinceInception)) + geom_histogram(binwidth = 5)
summary(df$RevenueSinceInception) dfPlot <- df %>% select(RevenueSinceInception) %>% filter(RevenueSinceInception <= 200 & RevenueSinceInception >= 0)  ggplot(data = dfPlot, aes(x = RevenueSinceInception)) + geom_histogram(binwidth = 5)
summary(df$Commission)
select(Commission) %>% filter(Commission <= 500 & Commission >= 0) ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 5)
dfPlot <- df %>% select(Commission) %>% filter(Commission <= 500 & Commission >= 0)
ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 5)
dfPlot <- df %>% select(Commission) %>% filter(NPN == "12183849")
dfPlot <- df %>% select(NPN, Commission) %>% filter(NPN == "12183849")
dfPlot
dfPlot <- df %>% select(Commission) %>% filter(Commission <= 1000 & Commission > 0) ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 5)
summary(df$Commission) dfPlot <- df %>% select(Commission) %>% filter(Commission <= 1000 & Commission > 0) ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 10)
ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 10) + geom_density()
ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 10) + geom_density()
ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 10) + geom_line(stat = "identity", color = "red")
ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 10) + geom_density(color="red")
ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 10)
ggplot(data = dfPlot, aes(x = Commission)) + geom_density(color = "red")
ggplot(data = dfPlot, aes(x = Commission)) + geom_line(stat="identity", color = "red")
ggplot(data = dfPlot, aes(x = Commission)) + geom_line(stat="identity")
ggplot(data = dfPlot, aes(x = Commission)) + geom_density()
ggplot(data = dfPlot, aes(x = Commission)) + geom_density(color="red", size=2)
ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 10) + geom_density(color="red", size=2)
ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 10) + geom_density(color="red", size=2, alpha=0.5)
ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 10, alpha = 0.5) + geom_density(color="red", size=2)
ggplot(data = dfPlot, aes(x = Commission)) + geom_histogram(binwidth = 10, color="grey60", size=0.2) + geom_density(color="red", size=2)
ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color="grey60", size=0.2) + geom_density(color="red")
ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color="grey60", size=0.2) + geom_density(color="red", size=1)
ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color="grey60", size=0.2) + geom_line(color="red", size=2)
ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color="grey60", size=0.2) + geom_density(color="red", size=2)
ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color="grey60", size=0.2) + geom_density(color="red", size=1.5)
ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color="grey60", size=0.2) + geom_density(color="red", size=1)
dfPlot <- df %>% select(Commission) %>% filter(Commission < 0) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
dfPlot <- df %>% select(Commission) %>% filter(Commission < 0 && Commission >= -1000) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
dfPlot <- df %>% select(Commission) %>% filter(Commission < 0 & Commission >= -1000) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
dfPlot <- df %>% select(Commission) %>% filter(Commission > 1000) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 100, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
summary(df$Commission)
dfPlot <- df %>% select(Commission) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
dfPlot <- df %>% select(Commission) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 5000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
dfPlot <- df %>% select(Commission) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
dfPlot <- df %>% select(Commission) ggplot(data = dfPlot, aes(x = Commission, y = ..count..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
dfPlot <- df %>% select(Commission) %>% filter(Commission <= 1000 & Commission > 0) ggplot(data = dfPlot, aes(x = Commission, y = ..count..)) + geom_histogram(binwidth = 10, color="grey60", size=0.2) + geom_density(color="red", size=1)
dfPlot <- df %>% select(Commission) %>% filter(Commission <= 1000 & Commission > 0) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color="grey60", size=0.2) + geom_density(color="red", size=1)
dfPlot <- df %>% select(Commission) ggplot(data = dfPlot, aes(x = Commission, y = ..count..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
dfPlot <- df %>% select(Commission) %>% filter(Commission <= 1000 & Commission >= -1000) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 100, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
dfPlot <- df %>% select(Commission) %>% filter(Commission <= 1000 & Commission >= -1000) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
# load XDF file #dfDiscovery <- rxImport(inData = "./data/DiscoveryAgentsRecoded.xdf") # load the data form SQL Server sConnection <- "Driver=SQL Server;Server=FL-TPA-BI-01.alg.local;Database=Amerilife_STG;Trusted_Connection=TRUE" sqlTableName <- "staging.SSAS_Discovery_Recoded" # Summarize the data by Agent  sQuery <- " SELECT  [pk] = MIN([pk]) ,[Agent] = MIN([Agent]) ,[NPN] ,[CRMGender] = MIN([CRMGender]) ,[CRMCounty] = MIN([CRMCounty]) ,[CRMState] = MIN([CRMState]) ,[CRMZipCode] = MIN([CRMZipCode]) ,[HasKits] = MAX([HasKits]) ,[HasContracts] = MAX([HasContracts]) ,[HasCommissionPayments] = MAX([HasCommissionPayments]) ,[DSCPrimaryAddressType] = MIN([DSCPrimaryAddressType]) ,[DSCPrimaryCounty] = MIN([DSCPrimaryCounty]) ,[DSCPrimaryMetropolitanArea] = MIN([DSCPrimaryMetropolitanArea]) ,[DSCPrimaryZipCode] = MIN([DSCPrimaryZipCode]) ,[DSCPrimaryZipCode3DigitSectional] = MIN([DSCPrimaryZipCode3DigitSectional]) ,[DSCDateOfBirthYear] = MIN([DSCDateOfBirthYear]) ,[DSCGenderCode] = MIN([DSCGenderCode]) ,[DSCAgentLicenseTypeHealth] = MIN([DSCAgentLicenseTypeHealth]) ,[DSCAgentLicenseTypeLife] = MIN([DSCAgentLicenseTypeLife]) ,[DSCAgentLicenseTypeVariableProducts] = MIN([DSCAgentLicenseTypeVariableProducts]) ,[DSCAgentLicenseTypePropertyCasualty] = MIN([DSCAgentLicenseTypePropertyCasualty]) ,[DSCNumberStateLicensesHealth] = MIN([DSCNumberStateLicensesHealth]) ,[DSCNumberStateLicensesLife] = MIN([DSCNumberStateLicensesLife]) ,[DSCNumberStateLicensesVariableProducts] = MIN([DSCNumberStateLicensesVariableProducts]) ,[DSCNumberStateLicensesPropertyCasualty] = MIN([DSCNumberStateLicensesPropertyCasualty]) ,[DSCStateLicensedCount] = MIN([DSCStateLicensedCount]) ,[DSCSellsRetirementPlanProducts] = MIN([DSCSellsRetirementPlanProducts]) ,[DSCCarrierAppointments] = MIN([DSCCarrierAppointments]) ,[DSCAppointmentCount] = MIN([DSCAppointmentCount]) ,[DSCYearsOfExperience] = MIN([DSCYearsOfExperience]) ,[DSCEarliestAppointmentDate] = MIN([DSCEarliestAppointmentDate]) ,[DSCDuallyLicensed] = MIN([DSCDuallyLicensed]) ,[DSCInCRD] = MIN([DSCInCRD]) ,[DSCRIAAffiliation] = MIN([DSCRIAAffiliation]) ,[DSCBDRIARep] = MIN([DSCBDRIARep]) ,[DSCBrokerDealerAffiliation] = MIN([DSCBrokerDealerAffiliation]) ,[12MonthRevenueFromContractCompleted] = SUM([12MonthRevenueFromContractCompleted]) ,[12MonthRevenueFromContractEffective] = SUM([12MonthRevenueFromContractEffective]) ,[12MonthFromFirstRevenue] = SUM([12MonthFromFirstRevenue]) ,[24MonthRevenueFromContractCompleted] = SUM([24MonthRevenueFromContractCompleted]) ,[24MonthRevenueFromContractEffective] = SUM([24MonthRevenueFromContractEffective]) ,[24MonthFromFirstRevenue] = SUM([24MonthFromFirstRevenue]) ,[RevenueSinceInception] = SUM([RevenueSinceInception]) ,[PolicyCount] = SUM([PolicyCount]) ,[Payments] = SUM([Payments]) ,[Commission] = SUM([Commission]) ,[PaymentCountSinceInception] = SUM([PaymentCountSinceInception]) ,RecordCount = COUNT(*) FROM [staging].[SSAS_Discovery_Recoded] group by NPN " sqlDataTable <- RxSqlServerData(connectionString = sConnection,     sqlQuery = sQuery)     #table = sqlTableName) df <- rxImport(inData = sqlDataTable,     rowsPerRead = 10000,     stringsAsFactors = TRUE)
library(ggplot2) library(car) library(dplyr) library(corrplot) library(gplots)
# Set the row names to the pk from SQL row.names(df) <- df$pk #rxGetVarInfo(df) str(df) summary(df)
summary(df$Commission)
# All dfPlot <- df %>% select(Commission) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Frequency of Lifetime Commissions generated by an Agent")  xlab("Total Commissions") + ylab("Frequency")
# All dfPlot <- df %>% select(Commission) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Frequency of Lifetime Commissions generated by an Agent")  labs(x = "Total Commissions", y = "Frequency")
# All dfPlot <- df %>% select(Commission) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Frequency of Lifetime Commissions generated by an Agent") + labs(x = "Total Commissions", y = "Frequency")
# Between 1 and $1000 dfPlot <- df %>% select(Commission) %>% filter(Commission <= 1000 & Commission > 0) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Frequency of Lifetime Commissions from $1 up to $1,000 generated by an Agent") + labs(x = "Total Commissions", y = "Frequency")
# Between 1 and $1000 dfPlot <- df %>% select(Commission) %>% filter(Commission <= 1000 & Commission > 0) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Frequency of Lifetime Commissions from $1 up to $1,000\n generated by an Agent") + labs(x = "Total Commissions", y = "Frequency")
# Above $500 dfPlot <- df %>% select(Commission) %>% filter(Commission > 500) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Frequency of Lifetime Commissions from $500 and up\n generated by an Agent") + labs(x = "Total Commissions", y = "Frequency")
# Between $500 and $2,500 dfPlot <- df %>% select(Commission) %>% filter(Commission <= 2500 & Commission >= 500) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Frequency of Lifetime Commissions from $500 up to $2,500\n generated by an Agent") + labs(x = "Total Commissions", y = "Frequency")
dfPlot <- df %>% select(Commission) %>% filter(Commission <= 2500 & Commission >= 500) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 100, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Frequency of Lifetime Commissions from $500 up to $2,500\n generated by an Agent") + labs(x = "Total Commissions", y = "Frequency")
# Between $500 and $2,500 dfPlot <- df %>% select(Commission) %>% filter(Commission <= 2500 & Commission >= 500) ggplot(data = dfPlot, aes(x = Commission, y = ..count..)) + geom_histogram(binwidth = 100, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Frequency of Lifetime Commissions from $500 up to $2,500\n generated by an Agent") + labs(x = "Total Commissions", y = "Frequency")
# Between $500 and $2,500 - Counts dfPlot <- df %>% select(Commission) %>% filter(Commission <= 2500 & Commission >= 500) ggplot(data = dfPlot, aes(x = Commission, y = ..count..)) + geom_histogram(binwidth = 100, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Counts of Lifetime Commissions from $500 up to $2,500\n generated by an Agent") + labs(x = "Total Commissions", y = "Counts")
# Between $500 and $2,500 - Counts dfPlot <- df %>% select(Commission) %>% filter(Commission <= 2500 & Commission >= 500) ggplot(data = dfPlot, aes(x = Commission, y = ..count..)) + geom_histogram(binwidth = 100, color = "grey60", size = 0.2) + ggtitle("Counts of Lifetime Commissions from $500 up to $2,500\n generated by an Agent") + labs(x = "Total Commissions", y = "Counts")
# Between -1 and -$1000 dfPlot <- df %>% select(Commission) %>% filter(Commission < 0 ) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
# Between -1 and -$1000 dfPlot <- df %>% select(Commission) %>% filter(Commission < 0 ) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 100, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
# Between -1 and -$1000 dfPlot <- df %>% select(Commission) %>% filter(Commission < 0 ) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1)
# Agents with debt dfPlot <- df %>% select(Commission) %>% filter(Commission < 0) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Counts of Lifetime Debts generated by an Agent\nThese Agents never produced revenue only debt") + labs(x = "Total Debt", y = "Counts")
# Agents with debt dfPlot <- df %>% select(Commission) %>% filter(Commission < 0) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 10000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Counts of Lifetime Debts generated by an Agent\nThese Agents never produced revenue only debt") + labs(x = "Total Debt", y = "Counts")
# Agents with debt dfPlot <- df %>% select(Commission) %>% filter(Commission < 0) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Counts of Lifetime Debts generated by an Agent\nThese Agents never produced revenue only debt") + labs(x = "Total Debt", y = "Counts")
# Agents with debt dfPlot <- df %>% select(Commission) %>% filter(Commission < 0) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 100, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Counts of Lifetime Debts generated by an Agent\nThese Agents never produced revenue only debt") + labs(x = "Total Debt", y = "Counts")
dfPlot <- df %>% select(Commission) %>% filter(Commission < 0) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 1000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Counts of Lifetime Debts generated by an Agent\nThese Agents never produced revenue only debt") + labs(x = "Total Debt", y = "Counts")
# Agents with debt dfPlot <- df %>% select(Commission) %>% filter(Commission < 0) ggplot(data = dfPlot, aes(x = Commission, y = ..density..)) + geom_histogram(binwidth = 2000, color = "grey60", size = 0.2) + geom_density(color = "red", size = 1) + ggtitle("Counts of Lifetime Debts generated by an Agent\nThese Agents never produced revenue only debt") + labs(x = "Total Debt", y = "Counts")
# Agents with debt - Counts dfPlot <- df %>% select(Commission) %>% filter(Commission < 0) ggplot(data = dfPlot, aes(x = Commission, y = ..counts..)) + geom_histogram(binwidth = 2000, color = "grey60", size = 0.2) + ggtitle("Counts of Lifetime Debts generated by an Agent\nThese Agents never produced revenue only debt") + labs(x = "Total Debt", y = "Counts")
# Agents with debt - Counts dfPlot <- df %>% select(Commission) %>% filter(Commission < 0) ggplot(data = dfPlot, aes(x = Commission, y = ..count..)) + geom_histogram(binwidth = 2000, color = "grey60", size = 0.2) + ggtitle("Counts of Lifetime Debts generated by an Agent\nThese Agents never produced revenue only debt") + labs(x = "Total Debt", y = "Counts")
